(ns quiz
  (:require
   [clojure.string :as str]
   [honey.sql :as sql]
   [integrant.core :as ig]
   [taoensso.timbre :as log]
   [telegrambot-lib.core :as tbot]
   [utils :refer [pformat]]))

(defmethod ig/init-key ::subscribed? [_ {:keys [bot channel-id]}]
  #(let [{:keys [ok error_code description]
          {:keys [status]} :result
          :as response} (tbot/get-chat-member bot channel-id %)]
     (when (and (not ok)
                (= error_code 400)
                (= description "Bad Request: PARTICIPANT_ID_INVALID"))
       (log/error "Unexpected get-chat-memeber response" response))
     (not= status "left")))

(defmethod ig/init-key ::admin? [_ {:keys [admin-chat-ids]}]
  #(contains? admin-chat-ids %))

(defn telegram-send
  ([bot to-id main-content] (telegram-send bot to-id main-content {}))
  ([bot to-id main-content additional-content]
   (let [sent_message (tbot/send-message bot
                                         to-id
                                         main-content
                                         (merge {:parse_mode "HTML"}
                                                additional-content))]
     (log/info "Send message: "
               (pformat sent_message))
     sent_message)))

(defmethod ig/init-key ::telegram-send [_ {:keys [bot]}]
  (partial telegram-send bot))

(def subscribed-callback-data "subscribed")

(def subscribed-additional-content
  {:reply_markup {:inline_keyboard [[{:text "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
                                      :callback_data subscribed-callback-data}]]}})

(defmethod ig/init-key ::user-welcome [_ {:keys [db-execute!]}]
  (fn [answer chat]
    (db-execute! {:insert-into :users
                  :values [(select-keys chat
                                        [:id
                                         :username
                                         :last_name
                                         :first_name])]}
                 true)
    (answer (str "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?\n\n"
                 "\u270C–ú—ã - –¶–µ–Ω—Ç—Ä –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –∏ –ö–ª—É–± LANIT Product manager.\n\n"
                 "–¢–æ–ø–∏–º –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —Ä–∞–∑–≤–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏.\n\n"
                 "üî•–°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º —Ñ—É—Ç–±–æ–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–¥–µ–ª–∞–ª–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å SlovoDna. "
                 "–î–∞, –Ω–∞ –∫–æ–Ω—É —Ç–µ —Å–∞–º—ã–µ —Ñ—É—Ç–±–æ–ª–∫–∏ - –∫–ª–∞—Å—Å–Ω—ã–µ –∏ —Å—Ç–∏–ª—å–Ω—ã–µ. "
                 "–í —Ç–∞–∫–æ–π –º–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞—á–µ:) "
                 "–£—Å–ª–æ–≤–∏—è –ø—Ä–æ—Å—Ç—ã–µ:\n\n"
                 "‚ö°Ô∏è–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à <a href='https://t.me/+C-XaEZ28W5szZTUy'>–∫–∞–Ω–∞–ª</a>\n"
                 "‚ö°Ô∏è–ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
                 "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äú–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è‚Äù")
            subscribed-additional-content)))

(defn user-id->next-question
  [db-execute! user-id]
  (let [db-question (db-execute! {:with [[:next-unanswered-question
                                          {:select [[:q.id :question-id]
                                                    [:q.text :question-text]
                                                    [:a.question-message-id :question-message-id]]
                                           :from [[:questions :q]]
                                           :left-join [[:user-answers :a]
                                                       [:and
                                                        [:= :q.id :a.question-id]
                                                        [:= :a.user-id user-id]]]
                                           :where [:and
                                                   [:is :a.answer-text nil]
                                                   [:is :a.option-id nil]]
                                           :order-by [[:q.sort-order]]
                                           :limit 1}]]
                                  :select [[:nuq.question-id :question-id]
                                           [:nuq.question-text :question-text]
                                           [:nuq.question-message-id :question-message-id]
                                           [:o.id :option-id]
                                           [:o.text :option-text]
                                           [:o.is-correct :option-is-correct]]
                                  :from [[:next-unanswered-question :nuq]]
                                  :left-join [[:question-options :o]
                                              [:= :nuq.question-id :o.question-id]]
                                  :order-by [[:o.sort-order]]}
                                 false)]
    (reduce (fn [q {:keys [option-id option-text option-is-correct]}]
              (if option-id
                (cond-> q
                  :always (update :options assoc option-id option-text)
                  :always (update :option-ids conj option-id)
                  option-is-correct (assoc :correct-option-id option-id))
                q))
            (-> db-question
                first
                (select-keys [:question-id
                              :question-text
                              :question-message-id])
                (assoc :options {})
                (assoc :option-ids #{}))
            db-question)))

(defn after-questions
  [answer]
  (answer (str "–≠—Ç–æ –±—ã–ª–æ –æ–≥–Ω–µ–Ω–Ω–æ!\n"
               "–õ–æ–≤–∏ –Ω–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π <a href='https://t.me/addstickers/LANIT3'>—Å—Ç–∏–∫–µ—Ä–ø–∞–∫</a>, "
               "–Ω–∞–∫–ª–µ–π–∫–∏ –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –Ω–∞ —Å—Ç–µ–Ω–¥–µ :)\n\n"
               "‚≠êÔ∏è–ß—Ç–æ–±—ã –∏ –¥–∞–ª—å—à–µ –±—ã—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –≤–æ–ª–Ω–µ, "
               "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ <a href='https://t.me/+K8YGduhn8NxiYjg6'>—Å–æ–æ–±—â–µ—Å—Ç–≤—É</a> –ø—Ä–æ–¥–∞–∫—Ç–æ–≤ –õ–ê–ù–ò–¢ :)"))
  (answer (str "üéÅ–≠—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –±—É–¥–µ–º —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å —Ñ—É—Ç–±–æ–ª–∫–∏ –æ—Ç SlovoDna! "
               "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±–µ—Ä–µ—Ç –≤–µ–ª–∏–∫–∏–π —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä:)\n\n"
               "üí¨–ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ.\n\n"
               "–ù–µ —É—Ö–æ–¥–∏ –¥–∞–ª–µ–∫–æ, —É –Ω–∞—Å –µ—â–µ –µ—Å—Ç—å –∏–≥—Ä—ã, "
               "–ø–æ–ø-–∫–æ—Ä–Ω –∏ –ø–∞—Ä–∞ –∫–æ—Ä–æ–±–æ–∫ —Å –Ω–∞—à–∏–º–∏ —à–æ–∫–æ–ª–∞–¥–∫–∞–º–∏, "
               "–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ —Å—ä–µ–¥—è—Ç:)")))

(defn ask-question
  [question-id question-text  options id answer db-execute!]
  (->> (if (not-empty options)
         {:reply_markup {:inline_keyboard (mapv (fn [[option-id option-text]]
                                                  [{:text option-text
                                                    :callback_data option-id}])
                                                options)}}
         {})
       (answer (str/replace question-text #"\\n" "\n"))
       :result
       :message_id
       (assoc {:user-id id :question-id question-id} :question-message-id)
       vector
       (assoc {:insert-into :user-answers} :values)
       (db-execute!)))

(defn questions
  [db-execute!
   subscribed?
   answer
   {{:keys [id]} :chat
    :keys [data
           text]
    :as msg}]
  (let [data (try (Integer/parseInt data)
                  (catch Exception _ data))
        any-answers? (-> {:select [[(sql/call :count :*)]]
                          :from [:user-answers]
                          :where [:= :user-id id]}
                         (db-execute! true)
                         :count
                         (not= 0))]
    (if (or (subscribed? id)
            any-answers?)
      (let [{:keys [question-id
                    question-text
                    question-message-id
                    options
                    option-ids
                    correct-option-id]} (user-id->next-question db-execute! id)]
        (if question-id
          (if question-message-id
            (if (not-empty options)
              (if (and data
                       (contains? option-ids data))
                (do
                  (db-execute! {:update :user-answers
                                :set {:option-id data}
                                :where [:and
                                        [:= :user-id id]
                                        [:= :question-id question-id]]})
                  (when correct-option-id
                    (if (= data
                           correct-option-id)
                      (answer "–í–µ—Ä–Ω–æ!")
                      (answer (str "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " (get options correct-option-id)))))
                  (questions db-execute! subscribed? answer msg))
                (answer "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"))
              (if text
                (do (db-execute! {:update :user-answers
                                  :set {:answer-text text}
                                  :where [:and
                                          [:= :user-id id]
                                          [:= :question-id question-id]]})
                    (questions db-execute! subscribed? answer msg))
                (answer "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞")))
            (ask-question question-id question-text  options id answer db-execute!))
          (after-questions answer)))
      (answer "–ù–µ –≤–∏–¥–∏–º —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É :) –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ :)" subscribed-additional-content))))

(defmethod ig/init-key ::user-main-chain [_ {:keys [db-execute! subscribed?]}]
  (partial questions db-execute! subscribed?))

(defmethod ig/init-key ::user-answer [_ {:keys [db-execute! user-welcome user-main-chain]}]
  (fn [msg answer]
    (let [{{:keys [id]
            :as chat} :chat} msg
          user (db-execute! {:select :*
                             :from :users
                             :where [:= :id id]}
                            true)]
      (if user
        (user-main-chain answer msg)
        (user-welcome answer chat)))))

(defn command?
  [text]
  (when text (str/starts-with? text "/")))

(defn select-random-users
  [users-count]
  {:select [:*]
   :from :users
   :where [[:= :is-winner nil]]
   :order-by [(sql/call [:random])]
   :limit users-count})

(defn select-winners
  [db-execute! subscribed? winners-count]
  (loop [winners []]
    (if (< (count winners) winners-count)
      (if-let [users (-> (- winners-count (count winners))
                         select-random-users
                         db-execute!
                         not-empty)]
        (let [{:keys [subscribed
                      not-subscribed-ids]}
              (reduce (fn [r {:keys [id] :as user}]
                        (if (subscribed? id)
                          (update r :subscribed conj user)
                          (update r :not-subscribed-ids conj id)))
                      {:subscribed []
                       :not-subscribed-ids []}
                      users)]
          (when (not-empty not-subscribed-ids)
            (db-execute! {:update :users
                          :set {:is-winner false}
                          :where [:in :id not-subscribed-ids]} true))
          (when (not-empty subscribed)
            (db-execute! {:update :users
                          :set {:is-winner true}
                          :where [:in :id (map :id subscribed)]}))
          (recur (concat winners subscribed)))
        winners)
      winners)))

(defmethod ig/init-key ::admin-commands [_ {:keys [db-execute! bot admin? subscribed?]}]
  {:start (fn [_ _ answer]
            (answer (str "–í—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/winner N - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å N –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (N - —á–∏—Å–ª–æ)\n"
                         "/stat - –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                         "–¢–∞–∫ –∂–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")))
   :stat (fn [_ _ answer]
           (->> {:select [[:%count.*]]
                 :from :users}
                db-execute!
                first
                :count
                (str "–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
                answer))
   :winner (fn [_msg winner-count answer]
             (let [winner-count (Integer/parseInt winner-count)
                   winners (select-winners db-execute! subscribed? winner-count)]
               (when (not-empty winners)
                 (doseq [{:keys [id]} (db-execute! {:select [:id] :from :users})]
                   (try (tbot/send-message bot
                                           id
                                           (str (count winners)
                                                " –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–æ–º!\n\n"
                                                (str/join "\n"
                                                          (mapv #(if-let [username (:username %)]
                                                                   username
                                                                   (str/join " " [(:first-name %)
                                                                                  (:last-name %)]))
                                                                winners))))
                        (catch Exception _))))
               (doseq [{:keys [id]} winners]
                 (tbot/send-message bot
                                    id
                                    (str "–¢–´ –í–´–ò–ì–†–ê–õ –§–£–¢–ë–û–õ–ö–£ –æ—Ç "
                                         "<a href='https://t.me/slovodna'>SlovoDna</a>, "
                                         "–ñ–î–ï–ú –¢–ï–ë–Ø –ù–ê –°–¢–ï–ù–î–ï! "
                                         "–£ —Ç–µ–±—è –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑. "
                                         "–ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ—à—å, —Ñ—É—Ç–±–æ–ª–∫–∞ <s>–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç—ã–∫–≤—É</s> "
                                         "–ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é üò≠ (winner-id: " id ")")
                                    {:parse_mode "HTML"}))
               (answer (if (not-empty winners)
                         (str/join "\n"
                                   (mapv (fn [{:keys [username
                                                      first-name
                                                      last-name
                                                      id]}]
                                           (str username " (" first-name " " last-name ", winner-id: " id ")"))
                                         winners))
                         "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º("))))
   :publish (fn [{{:keys [id]} :chat} message-id answer]
              (->> {:select [:id]
                    :from :users}
                   db-execute!
                   (map :id)
                   (filter #(not (admin? %)))
                   (map #(do (log/debug "user: " %)
                             (tbot/copy-message bot
                                                %
                                                id
                                                message-id)))
                   count
                   (str "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫–æ–ª-–≤–æ): ")
                   answer))})

(defmethod ig/init-key ::admin-answer [_ {:keys [admin-commands]}]
  (fn [{:keys [text
               message_id
               data]
        :as msg}
       answer]
    (let [command (or data text)]
      (cond
        (command? command)
        (if-let [command-fn (get admin-commands (-> command
                                                    (str/split #"\s+")
                                                    first
                                                    (subs 1)
                                                    keyword))]
          (command-fn msg
                      (->> (str/split command #"\s+")
                           (rest)
                           (str/join " "))
                      answer)
          (answer "Unknown command"))

        :else
        (answer "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?"
                {:reply_to_message_id message_id
                 :reply_markup {:inline_keyboard [[{:text "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
                                                    :callback_data (str "/publish " message_id)}]]}})))))

(defmethod ig/init-key ::msg->answer [_ {:keys [telegram-send admin? user-answer admin-answer]}]
  (fn [msg]
    (let [{{:keys [id]} :chat} msg
          answer (partial telegram-send id)]
      (if id
        (if (admin? id)
          (admin-answer msg answer)
          (user-answer msg answer))
        (log/warn "strange message without chat-id: " (pformat msg))))))
